use earclip::{convert_2d, convert_3d, earclip, Point2D, Point3D};

#[test]
fn convert_2d_test() {
    struct P2D {
        x: f64,
        y: f64,
    }
    impl P2D {
        fn new(x: f64, y: f64) -> Self {
            Self { x, y }
        }
    }
    impl Point2D for P2D {
        fn x(&self) -> f64 {
            self.x
        }
        fn y(&self) -> f64 {
            self.y
        }
    }

    let polygon = vec![vec![P2D::new(0.0, 0.0), P2D::new(1.0, 0.0), P2D::new(0.0, 1.0)]];
    let poly_2d = convert_2d(&polygon);
    let (vertices, indices) = earclip(&poly_2d, None, None);
    assert_eq!(vertices, vec![0.0, 0.0, 1.0, 0.0, 0.0, 1.0]);
    assert_eq!(indices, vec![1, 2, 0]);
}

#[test]
fn convert_3d_test() {
    struct P3D {
        x: f64,
        y: f64,
        z: f64,
    }
    impl P3D {
        fn new(x: f64, y: f64, z: f64) -> Self {
            Self { x, y, z }
        }
    }
    impl Point3D for P3D {
        fn x(&self) -> f64 {
            self.x
        }
        fn y(&self) -> f64 {
            self.y
        }
        fn z(&self) -> f64 {
            self.z
        }
    }

    let polygon =
        vec![vec![P3D::new(0.0, 0.0, 0.0), P3D::new(1.0, 0.0, 0.0), P3D::new(0.0, 1.0, 0.0)]];
    let poly = convert_3d(&polygon);
    let (vertices, indices) = earclip(&poly, None, None);
    assert_eq!(vertices, vec![0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0]);
    assert_eq!(indices, vec![1, 2, 0]);
}

#[test]
fn empty() {
    let polygon: Vec<Vec<Vec<f64>>> = vec![];
    let (vertices, indices) = earclip(&polygon, None, None);
    assert_eq!(vertices, vec![]);
    assert_eq!(indices, vec![]);
}

#[test]
fn simple() {
    let polygon = vec![vec![vec![0.0, 0.0, 0.0], vec![1.0, 0.0, 0.0], vec![0.0, 1.0, 0.0]]];
    let (vertices, indices) = earclip(&polygon, None, None);
    assert_eq!(vertices, vec![0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0]);
    assert_eq!(indices, vec![1, 2, 0]);
}

#[test]
fn flat_points() {
    let geometry = vec![
        vec![
            vec![3506.0, -2048.0],
            vec![7464.0, 402.0],
            vec![-2048.0, 2685.0],
            vec![-2048.0, -2048.0],
            vec![3506.0, -2048.0],
        ],
        vec![
            vec![-2048.0, -37.0],
            vec![1235.0, 747.0],
            vec![338.0, -1464.0],
            vec![-116.0, -1188.0],
            vec![-2048.0, -381.0],
            vec![-2048.0, -37.0],
        ],
        vec![
            vec![-1491.0, -1981.0],
            vec![-1300.0, -1800.0],
            vec![-1155.0, -1981.0],
            vec![-1491.0, -1981.0],
        ],
    ];
    let (vertices, indices) = earclip(&geometry, None, None);
    assert_eq!(
        vertices,
        vec![
            3506.0, -2048.0, 7464.0, 402.0, -2048.0, 2685.0, -2048.0, -2048.0, 3506.0, -2048.0,
            -2048.0, -37.0, 1235.0, 747.0, 338.0, -1464.0, -116.0, -1188.0, -2048.0, -381.0,
            -2048.0, -37.0, -1491.0, -1981.0, -1300.0, -1800.0, -1155.0, -1981.0, -1491.0, -1981.0,
        ]
    );
    assert_eq!(
        indices,
        vec![
            3, 11, 12, 13, 11, 3, 2, 5, 6, 7, 8, 9, 9, 3, 12, 13, 3, 0, 1, 2, 6, 7, 9, 12, 12, 13,
            0, 0, 1, 6, 7, 12, 0, 0, 6, 7,
        ]
    );
}

// test('tesselate', () => {
//     const geometry = [
//       [
//         { x: 3506, y: -2048 },
//         { x: 7464, y: 402 },
//         { x: -2048, y: 2685 },
//         { x: -2048, y: -2048 },
//         { x: 3506, y: -2048 },
//       ],
//       [
//         { x: -2048, y: -37 },
//         { x: 1235, y: 747 },
//         { x: 338, y: -1464 },
//         { x: -116, y: -1188 },
//         { x: -2048, y: -381 },
//         { x: -2048, y: -37 },
//       ],
//       [
//         { x: -1491, y: -1981 },
//         { x: -1300, y: -1800 },
//         { x: -1155, y: -1981 },
//         { x: -1491, y: -1981 },
//       ],
//     ];
//     expect(earclip(geometry, 2048)).toEqual({
//       indices: [
//         3, 11, 12, 13, 11, 3, 15, 51, 50, 18, 8, 9, 9, 3, 12, 21, 13, 3, 28, 53, 6, 12, 31, 9, 13, 36,
//         12, 56, 40, 42, 46, 7, 43, 58, 7, 48, 6, 15, 16, 60, 16, 15, 7, 17, 18, 18, 17, 8, 0, 19, 20,
//         20, 19, 21, 21, 19, 22, 21, 22, 13, 1, 23, 24, 24, 23, 25, 25, 23, 26, 25, 26, 27, 27, 26, 28,
//         27, 28, 6, 62, 30, 2, 64, 29, 6, 7, 31, 32, 32, 31, 12, 0, 33, 34, 34, 33, 35, 35, 33, 36, 35,
//         36, 13, 66, 1, 37, 38, 67, 39, 70, 37, 40, 39, 71, 0, 74, 42, 6, 76, 41, 0, 12, 43, 44, 44,
//         43, 7, 0, 45, 46, 46, 45, 7, 0, 47, 48, 47, 77, 48, 5, 49, 50, 50, 49, 15, 2, 51, 52, 52, 51,
//         15, 30, 53, 54, 54, 53, 28, 0, 55, 56, 55, 79, 56, 6, 57, 58, 58, 57, 7, 5, 59, 60, 60, 59,
//         16, 29, 61, 62, 62, 61, 30, 30, 63, 64, 64, 63, 29, 38, 65, 66, 66, 65, 1, 37, 67, 68, 68, 67,
//         38, 39, 69, 70, 70, 69, 37, 40, 71, 72, 71, 81, 72, 41, 73, 74, 74, 73, 42, 42, 75, 76, 76,
//         75, 41, 6, 77, 78, 78, 77, 47, 40, 79, 80, 80, 79, 55, 39, 81, 82, 82, 81, 71,
//       ],
//       vertices: [
//         3506, -2048, 7464, 402, -2048, 2685, -2048, -2048, 3506, -2048, -2048, -37, 1235, 747, 338,
//         -1464, -116, -1188, -2048, -381, -2048, -37, -1491, -1981, -1300, -1800, -1155, -1981, -1491,
//         -1981, 0, 1476.0374657325617, 0, 452.07462686567163, 0, -1258.5198237885463, 0,
//         -1310.58256496228, 2048, -2027.041836515769, 2048, -2048, 0, -2048, 0, -1997.6026603733105,
//         6144, 718.8166526492851, 6144, 475.1096484186868, 4096, 588.5403756622251, 4096,
//         1210.362489486964, 2048, 701.9711029057634, 2048, 1701.9083263246425, 0, 1476.0374657325617,
//         0, 2193.4541631623215, 0, -1310.58256496228, 0, -1533.3333333333333, 2048,
//         -1972.7640449438202, 2048, -2027.041836515769, 0, -1997.6026603733105, 0, -1867.082813150229,
//         6144, 475.1096484186868, 6144, -415.0793329964629, 4096, -1682.7902981303687, 4096,
//         588.5403756622251, 2048, -253.58784676354026, 2048, 701.9711029057634, 0, -1867.082813150229,
//         0, -1533.3333333333333, 2048, -1779.2272727272727, 2048, -1972.7640449438202, 2048,
//         -253.58784676354026, 2048, -1779.2272727272727, -1997.9179619036652, 0, -2048, 0, -2048, 2048,
//         -968.9127966976264, 2048, 124.19051780578839, 2048, 606.027157249234, 2048,
//         3964.2975520321793, 0, 2420.1762264902154, 0, 931.9430122116689, 0, 1475.402360688774, 0,
//         -1893.0625, 0, -1997.9179619036652, 0, 0, 2048, -968.9127966976264, 2048, 0, 2048,
//         124.19051780578839, 2048, 6814.564897959183, 0, 6144, 0, 5693.087268148115,
//         -1.1368683772161603e-13, 6144, -1.1368683772161603e-13, 5693.087268148115, 0, 4096, 0,
//         3964.2975520321793, 1.1368683772161603e-13, 4096, 1.1368683772161603e-13, 2048, 0,
//         1841.9542039355993, 0, 2048, -1.1368683772161603e-13, 2420.1762264902154,
//         -1.1368683772161603e-13, 1475.402360688774, 0, 1841.9542039355993, 0, 2420.176226490216,
//         1.1368683772161603e-13, 3964.2975520321793, 1.1368683772161603e-13, 4096, 0,
//         3964.2975520321793, 0,
//       ],
//     });
//   });

#[test]
fn tesselate() {
    let geometry = vec![
        vec![
            vec![3506.0, -2048.0],
            vec![7464.0, 402.0],
            vec![-2048.0, 2685.0],
            vec![-2048.0, -2048.0],
            vec![3506.0, -2048.0],
        ],
        vec![
            vec![-2048.0, -37.0],
            vec![1235.0, 747.0],
            vec![338.0, -1464.0],
            vec![-116.0, -1188.0],
            vec![-2048.0, -381.0],
            vec![-2048.0, -37.0],
        ],
        vec![
            vec![-1491.0, -1981.0],
            vec![-1300.0, -1800.0],
            vec![-1155.0, -1981.0],
            vec![-1491.0, -1981.0],
        ],
    ];
    let (vertices, indices) = earclip(&geometry, Some(2048.0), None);
    assert_eq!(
        vertices,
        vec![
            3506.0,
            -2048.0,
            7464.0,
            402.0,
            -2048.0,
            2685.0,
            -2048.0,
            -2048.0,
            3506.0,
            -2048.0,
            -2048.0,
            -37.0,
            1235.0,
            747.0,
            338.0,
            -1464.0,
            -116.0,
            -1188.0,
            -2048.0,
            -381.0,
            -2048.0,
            -37.0,
            -1491.0,
            -1981.0,
            -1300.0,
            -1800.0,
            -1155.0,
            -1981.0,
            -1491.0,
            -1981.0,
            0.0,
            1476.0374657325617,
            0.0,
            452.07462686567163,
            0.0,
            -1258.5198237885463,
            0.0,
            -1310.58256496228,
            2048.0,
            -2027.041836515769,
            2048.0,
            -2048.0,
            0.0,
            -2048.0,
            0.0,
            -1997.6026603733105,
            6144.0,
            718.8166526492851,
            6144.0,
            475.1096484186868,
            4096.0,
            588.5403756622251,
            4096.0,
            1210.362489486964,
            2048.0,
            701.9711029057634,
            2048.0,
            1701.9083263246425,
            0.0,
            1476.0374657325617,
            0.0,
            2193.4541631623215,
            0.0,
            -1310.58256496228,
            0.0,
            -1533.3333333333333,
            2048.0,
            -1972.7640449438202,
            2048.0,
            -2027.041836515769,
            0.0,
            -1997.6026603733105,
            0.0,
            -1867.082813150229,
            6144.0,
            475.1096484186868,
            6144.0,
            -415.0793329964629,
            4096.0,
            -1682.7902981303687,
            4096.0,
            588.5403756622251,
            2048.0,
            -253.58784676354026,
            2048.0,
            701.9711029057634,
            0.0,
            -1867.082813150229,
            0.0,
            -1533.3333333333333,
            2048.0,
            -1779.2272727272727,
            2048.0,
            -1972.7640449438202,
            2048.0,
            -253.58784676354026,
            2048.0,
            -1779.2272727272727,
            -1997.9179619036652,
            0.0,
            -2048.0,
            0.0,
            -2048.0,
            2048.0,
            -968.9127966976264,
            2048.0,
            124.19051780578839,
            2048.0,
            606.027157249234,
            2048.0,
            3964.2975520321793,
            0.0,
            2420.1762264902154,
            0.0,
            931.9430122116689,
            0.0,
            1475.402360688774,
            0.0,
            -1893.0625,
            0.0,
            -1997.9179619036652,
            0.0,
            0.0,
            2048.0,
            -968.9127966976264,
            2048.0,
            0.0,
            2048.0,
            124.19051780578839,
            2048.0,
            6814.564897959183,
            0.0,
            6144.0,
            0.0,
            5693.087268148115,
            -1.1368683772161603e-13,
            6144.0,
            -1.1368683772161603e-13,
            5693.087268148115,
            0.0,
            4096.0,
            0.0,
            3964.2975520321793,
            1.1368683772161603e-13,
            4096.0,
            1.1368683772161603e-13,
            2048.0,
            0.0,
            1841.9542039355993,
            0.0,
            2048.0,
            -1.1368683772161603e-13,
            2420.1762264902154,
            -1.1368683772161603e-13,
            1475.402360688774,
            0.0,
            1841.9542039355993,
            0.0,
            2420.176226490216,
            1.1368683772161603e-13,
            3964.2975520321793,
            1.1368683772161603e-13,
            4096.0,
            0.0,
            3964.2975520321793,
            0.0,
        ]
    );
    assert_eq!(
        indices,
        vec![
            3, 11, 12, 13, 11, 3, 15, 51, 50, 18, 8, 9, 9, 3, 12, 21, 13, 3, 28, 53, 6, 12, 31, 9,
            13, 36, 12, 56, 40, 42, 46, 7, 43, 58, 7, 48, 6, 15, 16, 60, 16, 15, 7, 17, 18, 18, 17,
            8, 0, 19, 20, 20, 19, 21, 21, 19, 22, 21, 22, 13, 1, 23, 24, 24, 23, 25, 25, 23, 26,
            25, 26, 27, 27, 26, 28, 27, 28, 6, 62, 30, 2, 64, 29, 6, 7, 31, 32, 32, 31, 12, 0, 33,
            34, 34, 33, 35, 35, 33, 36, 35, 36, 13, 66, 1, 37, 38, 67, 39, 70, 37, 40, 39, 71, 0,
            74, 42, 6, 76, 41, 0, 12, 43, 44, 44, 43, 7, 0, 45, 46, 46, 45, 7, 0, 47, 48, 47, 77,
            48, 5, 49, 50, 50, 49, 15, 2, 51, 52, 52, 51, 15, 30, 53, 54, 54, 53, 28, 0, 55, 56,
            55, 79, 56, 6, 57, 58, 58, 57, 7, 5, 59, 60, 60, 59, 16, 29, 61, 62, 62, 61, 30, 30,
            63, 64, 64, 63, 29, 38, 65, 66, 66, 65, 1, 37, 67, 68, 68, 67, 38, 39, 69, 70, 70, 69,
            37, 40, 71, 72, 71, 81, 72, 41, 73, 74, 74, 73, 42, 42, 75, 76, 76, 75, 41, 6, 77, 78,
            78, 77, 47, 40, 79, 80, 80, 79, 55, 39, 81, 82, 82, 81, 71,
        ]
    );
}
